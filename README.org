#+title: README

* Cookbook

** Bluetooth: bluetoothctl

Bluetooth

Or, you can use the a toggle script:

bash ~/.config/sway/bluetooth-toggle.sh

TODO: would be nice to actually have this script be executable and in the
=$PATH= as opposed to this funky config.

TODO: Add notifications to the toggle script

** Networking: NetworkManager CLI

=nmcli= is the NetworkManager CLI. You can use nmcli to connect to a wifi
network using a CLI interface.

#+BEGIN_SOURCE sh
# List Networks
nmcli device wifi list
# Connect to network $SSID using password $PASSWORD
nmcli device wifi connect $SSID password $PASSWORD
#+END_SOURCE

** File Sync: Syncthing

Syncthing is added as a user service and started by default.

To open the Syncthing web interfaces navigate to [[https://localhost:8384/][localhost:8384]].

** Emacs

*** Org

By default much of my emacs configuration depends on an org directory populated
with data files. I sync this directory across machines using syncthing (Note:
version-control isn't used for org data to decrease the friction to make
changes).

*** Feeds: elfeed

Use =elfeed= to read RSS/Atom feeds.

The list of feeds is stored in [[elisp:(find-file (car rmh-elfeed-org-files))][$org-directory/elfeed.org]]

The database is similarly stored in the [[elisp:(helpful-variable 'org-directory)][org directory]].

*Youtube channels* are best consumed as an RSS [el]feed, however it's tricky to find
the URL. Use [[elisp:(helpful-function 'elfeed-tube-add-feeds)][elfeed-tube-add-feeds]] to find the URL and then manually plug that
into the =elfeed.org= file. Future work: create helper function / org capture to
directly populate the =elfeed.org= file.

*** info-apropos

[[elisp:(helpful-callable 'info-apropos)][=info-apropos=]] makes it easy to do a text search of info documents.

For guile / guix that's where the critical information is, making a good search
tool critical.

**** info-apropos QoL improvements

Is there a package that can handle all of the below?

- [ ] can I pass a regex?
- [ ] ivy / helm / vertico integration?
- [ ] evil help mode keybinding
** Environments

*** Common Lisp

This configuration uses [[https://en.wikipedia.org/wiki/Steel_Bank_Common_Lisp][SBCL]] for common-lisp'ing.

**** Coalton

See [[https://github.com/coalton-lang/coalton][coalton]] for ML meets CL.

#+BEGIN_SRC lisp
;; Require the asdf system loader -- is this required?
(require "asdf")
(asdf:load-package :coalton)

;; Enter the Coalton user package to get hacking on the REPL
(in-package :coalton-user)
#+END_SRC

NOTE: There's probably a simpler approach, but the above worked for me.

*** Guile

To start a guile shell with the current path in the module load path:

#+BEGIN_SRC sh
GUILE_LOAD_PATH="$PWD" guile
#+END_SRC

**** Open Questions

- matrix math interface (something like cl-ffi-blas)
