(defvar dotspacemacs-mu-root
  (expand-file-name "~/repos/mu")
  "mu's source path")

(defvar dotspacemacs-slack-el
  (expand-file-name (concat dotspacemacs-directory "/slack.el"))
  "the path to the slack elisp file")

(when (eq system-type 'gnu/linux)
  (setq
   browse-url-firefox-program "firefox-developer-edition"
   browse-url-browser-function 'browse-url-firefox))

(setq-default
 dotspacemacs-themes '({{ emacs_themes }})
 dotspacemacs-mode-line-theme 'spacemacs)

(defun dotspacemacs/layers ()
  "Layer congfiguration."
  (setq-default
   dotspacemacs-configuration-layers
   '(
     ansible
     auto-completion
     lsp
     ;; common-lisp
     csv
     dash
     deft
     docker
     emacs-lisp
     fasd
     git
     html
     (ivy :variables
          ivy-wrap t
          ivy-enable-advanced-buffer-information t)
     (javascript :variables
                 javascript-backend 'lsp)
     markdown
     nginx
     (org :variable
          org-pomodoro-audio-player "paplay")
     {% if emacs_org_jira_enabled %}org-jira{% endif %}
     react
     shell-scripts
     spacemacs
     sql
     (python :variables
             python-test-runner 'pytest
             python-backend 'lsp
             python-format-on-save t
             python-formatter 'black
             python-shell-interpreter "ipython"
             lsp-pyls-configuration-sources ["flake8"]
      )
     {% if emacs_prodigy_enabled %}prodigy{% endif %}
     ;; rcirc
     ;; restclient
     slack
     spacemacs-layouts
     syntax-checking
     typography
     yaml
     (mu4e
      :variables
      mu4e-installation-path "/usr/share/emacs/site-lisp/mu4e"
      mu4e-maildir "~/maildirs")
     ;; Private Layers
     {% if emacs_org_page_enabled %}org-page{% endif %}
     ;; lfe
   )
   dotspacemacs-additional-packages
   '(
     elvish-mode
     ob-ipython
     blacken
     react-snippets
    )
  ))

(setq rcirc-server-alist
      '(("irc.freenode.net" :port 6697 :encryption tls
   :channels ("#switchboard-dev" "#elixir-lang" "#emacs"))))


(setq-default dotspacemacs-default-font '("Source Code Pro"
                                          :size {{ emacs_font_size }}
                                          :weight normal
                                          :width normal
                                          :powerline-scale {{ emacs_powerline_scale }}))


(defun dotspacemacs/user-config ()
  "Post spacemacs init config."

  ;; Setup paths
  (defun personal//join-path (root component)
    (concat (file-name-as-directory root) component))

  (cl-defun personal//join-paths (&rest components)
    (cl-reduce 'personal//join-path components))

  (defun personal//add-to-path (path)
    (add-to-list 'exec-path path)
    (let ((path-list (split-string (getenv "PATH") ":")))
      (add-to-list 'path-list path)
      (setenv "PATH" (string-join path-list ":")))
    exec-path)

  (personal//add-to-path (personal//join-paths (getenv "HOME") "bin"))
  (personal//add-to-path (personal//join-paths (getenv "HOME") ".local/bin"))
  (personal//add-to-path (personal//join-paths (getenv "HOME") ".yarn/bin"))

  ;; Define some helpers for loading configs
  (defun personal//eval-config-after-load (mode config)
    (let ((path (personal//join-path dotspacemacs-directory config)))
      (eval-after-load mode `(load-file ,path))))

  (personal//eval-config-after-load 'lsp "config/lsp.el")
  (personal//eval-config-after-load 'web-mode "config/web-mode.el")
  (personal//eval-config-after-load 'js-mode "config/js-mode.el")
  (personal//eval-config-after-load 'eshell "config/eshell.el")
  (personal//eval-config-after-load 'org "config/org.el")
  (personal//eval-config-after-load 'mu4e "config/mu4e.el")
  (personal//eval-config-after-load 'prodigy "config/prodigy.el")
  (personal//eval-config-after-load 'python "config/python.el")
  (personal//eval-config-after-load 'ansible "config/ansible.el")

  ;; Yas fun
  (defun my-yas-get-first-name-from-to-field ()
    (let ((rlt "AGENT_NAME") str)
      (save-excursion
        (goto-char (point-min))
        ;; first line in email could be some hidden line containing NO to field
        (setq str (buffer-substring-no-properties (point-min) (point-max))))
      (if (string-match "^To: \"\\([^ ,]+\\)" str)
          (setq rlt (match-string 1 str)))
      rlt))

  ;; javascript
  (with-eval-after-load 'rjsx
    (setq-default
     ;; js2-mode
     js2-basic-offset 2
     tern-command (list (expand-file-name "~/.yarn/bin/tern")))
    )

  (with-eval-after-load 'markdown
    (setq markdown-command
          "pandoc -f markdown -t html -s --mathjax --highlight-style=pygments"))

  ;; dash
  (with-eval-after-load 'counsel-dash
    (add-hook 'python-mode
              (setq-local counsel-dash-docsets '("Python_3"))) )

  ;; erlang
  (with-eval-after-load 'erlang-mode
    ;; Use man pages initalled by homebrew when on OS X
    (if (string-equal system-type "darwin")
        (setq erlang-root-dir "/usr/local/opt/erlang/lib/erlang")))

  ;; fasd
  (with-eval-after-load 'fasd
    (with-eval-after-load 'eshell
      (defun fasd-add-file-to-db-eshell ()
        "Add current file or directory to the Fasd database."
        (if (not (executable-find "fasd"))
            (message "Fasd executable cannot be found. It is required by `fasd.el'. Cannot add file/directory to the fasd db")
          (let ((file (pcase major-mode
                        ('dired-mode dired-directory)
                        ('eshell-mode (expand-file-name default-directory))
                        (_ (buffer-file-name)))
                      ))
            (when (and file
                       (stringp file)
                       (file-readable-p file))
              (start-process "*fasd*" nil "fasd" "--add" file)))))
      ))

  ;; Time tracking
  ;; (setq buffer-list-update-hook nil)
  (defvar personal--buffer-tracker-categories
    '((email . (lambda (buffer) (string-prefix-p "*mu4e-" (buffer-name buffer))))
      (other . (lambda (buffer) t)))
    "Categories for buffer tracking.")

  ;; (timeclock-change nil 'other)
  (defun personal//buffer-tracker-hook ()
    (let ((current-buffer (car (buffer-list))))
      (if current-buffer
          (let ((match (-first (lambda (category) (funcall (cdr category) current-buffer))
                               personal--buffer-tracker-categories)))
            (if project
                (if (and (boundp 'timeclock-last-event) (equal "i" (car timeclock-last-event)))
                    (timeclock-change nil project)
                  (timeclock-in nil project))))
          )))

  ;; (add-hook 'buffer-list-update-hook 'personal//buffer-tracker-hook)

  ;; deft
  (setq deft-directory "~/ocloud/org/notes")

  ;; magit
  (with-eval-after-load 'magit
    (setq magit-repository-directories `((,(expand-file-name "~/repos") . 1))))

  ;; Slack
  (with-eval-after-load 'slack
    (setq slack-prefer-current-team t)
    (spacemacs/set-leader-keys
      "aCr" 'slack-select-rooms
      "aCg" 'slack-group-select)
    (when (file-exists-p dotspacemacs-slack-el)
      (load-file dotspacemacs-slack-el)
      (mapcar (lambda (team) (apply 'slack-register-team team)) dotspacemacs-slack-teams)))

  (defun stump-notify (msg)
    "Create a stump notification"
    (interactive "sNotification: ")
    (start-process "notifications-add" nil
                   "stumpish" "notifications-add" msg))

  ;; Elfeed

  (with-eval-after-load 'elfeed
    (setq elfeed-feeds
          '("http://venturevalkyrie.com/rss")))
  ;; Alert
  (with-eval-after-load 'alert
    (alert-define-style 'stump :title "stumpwm notifications"
                        :notifier
                        (lambda (info)
                          (let ((title (plist-get info :title))
                                (mode (symbol-name (plist-get info :mode)))
                                (message (plist-get info :message)))
                            (stump-notify (concat title " [" mode "]: " message)))))
    (setq alert-default-style 'libnotify))

  ;; SQL
  (setq sql-connection-alist
        '(
          (local-postgres
           (sql-product 'postgres)
           (sql-user "postgres")
           (sql-server "localhost")
           (sql-database "postgres")
           (sql-port 5432))
          ))

  )

(defun dotspacemacs/init ()
  "Init callback."
  (add-hook 'after-init-hook #'global-emojify-mode)
  (setq-default dotspacemacs-editing-style 'vim
                dotspacemacs-leader-key "SPC"
                dotspacemacs-emacs-leader-key "M-m"
                dotspacemacs-major-mode-leader-key ","
                dotspacemacs-command-key ":")

  (setq spacemacs-erlang-elixir-use-edts t))
